

!!!!!

Update all endpoints to add validation that requested resources are really in the projects that the users says they are in.
Currently we only authorize on project.

Replace all Request with NextRequest type (see routehelpers)

Figure out wth Drizzle's partial returning doesn't work, and then update all returning statements

!!!!!


EFFICIENT UNIT MANAGEMENT

Make hook that fetches ALL units for a project, and stores them in indexedDB.
When the hook is mounted, first only get list of unit ids and hashes, to check whether indexedDB is still in sync
If not, update the unit ids that need updating.



RENAME units so that in the annotatorIndex the indices are jobSessionIndex and not unitIndex.
Reserve the name units exclusively for units in annotation jobs.

Make sub table for annotations in DB

composite primary key:

- id (as created by client)
- unitAnnotationId
- annotation

When posting annotations, just post the ones for current variable, as an upsert using the unique IDs.

The encrypted session token doesn't contain the validation data, but just a boolean for whether or not the variable should be validated. If so, fetch the validation data from the DB.

Include "done" field in annotation. Set this to true if the annotator confirmed submitting the variable (in case of multi code annotations).

Now always calculate the variablestatuses from scratch on update. Make it so that it stops if a variable is not yet answered (which can happen if codebook changed). Then recalculate once answered, so it should automatically skip over gaps.

Store annotations as an object, and we can in one query add and remove annotations.
This way we don't have to send redundant annotations, but just a AnnotationDictionary object to 'add',
and an array of 'rmIds'.

-- Create the table
CREATE TABLE my_table (
id serial PRIMARY KEY,
test text,
data jsonb NOT NULL
);

-- Insert example data
INSERT INTO my_table (test,data)
VALUES ('testdit', '{
"id1": "",
"id2": "",
"id3": "",
"id4": ""
}');

SELECT jsonb_pretty(data)
FROM my_table
WHERE id = 1;

UPDATE my_table
SET data = (data - ARRAY['id1', 'id2']) ||
'{"idnew1": "", "idnew2":""}'::jsonb,
test = 'jeej'
WHERE id=1;

SELECT jsonb_pretty(data), test
FROM my_table
WHERE id = 1;
